{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Hi \ud83d\udc4b. Anunaya here. Welcome to my personal corner of the internet.</p> <p>I am a software engineer by profession and by interest. I want a place to store  my learnings from the various things I read and work upon. These include things  from life advice, time management, software engineering etc. Hence, this space  was born.</p> <p>If you have suggestions about this space, you can reach out to me on Linkedin or X (formerly Twitter).</p>"},{"location":"#visiting-the-garden","title":"Visiting the Garden","text":"<p>If this is your first visit, welcome! You might be overwhelmed by the amount of  content here. You can browse the topics in the navigation tree on the left.  Start reading the first article that grabs your attention. You can also use the  search bar at the top.</p>"},{"location":"#history-and-the-future","title":"History and the Future","text":"<p>This space is inspired by The Blue Book which I stumbled upon while googling about a software engineering concept. In fact, The Blue Book was one of the top results in the Google search. I learnt that this  concept is called Digital Garden.</p> <p>The idea is to have a knowledge repository \ud83d\udca1 which can grow over time. These posts  are like sapplings \ud83c\udf40 which will be nurtured and grow in a beautiful garden \ud83c\udf34.  The garden will bear fruits \ud83c\udf4a for gardener and other people visiting the garden.</p> <p>Note</p> <p>This space is in its nacent stage. It will be restructured and reformatted in multiple ways in the coming future.</p> <p>Currently the garden has content about Software Enggineering particularly  Python, Go.</p>"},{"location":"#how-is-this-garden-made","title":"How is this Garden made?","text":"<p>I wanted a setup where I can use a simple text editor, like <code>neovim</code>, to write the  content, store the content in a version control tool, like <code>git</code>, and easily  publish it on the internet. I came up with the following setup.</p> <ol> <li>Write content using <code>markdown</code> in <code>neovim</code>.</li> <li>Use MkDocs site generator with Material for MkDocs     to generate a site. This setup provides a good navigational website with      a beautiful UI. MkDocs has a good suite of plugins to provide functinoality      like search.</li> <li>Use <code>git</code> and <code>Github</code> for versioning and storage.</li> <li>Use <code>Github Pages</code> and <code>Github Actions</code> to publish the website with each commit     or merge to the <code>main</code> branch. MkDocs comes with built-in command <code>mkdocs gh-deploy</code>     to build and deploy the site on Github Pages.</li> </ol>"},{"location":"about/","title":"About","text":"<p>Hi \ud83d\udc4b. Anunaya here. I am a software engineer by profession and by interest. </p> <p>You can access my Digital Garden here.</p> <p>You can access my blogs here.</p> <p>You can reach out to me on Linkedin or X (formerly Twitter).</p>"},{"location":"page2/","title":"Second page","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2021/01/02/how-to-choose-your-first-programming-language/","title":"How to choose your First Programming Language","text":"<p>You first programming language can make or break your interest in the wonderful world of programming and building cool stuff.</p> <p>Let me summarise this long story for you -</p> <ol> <li>Programming language doesn\u2019t make you a better developer; building a solid foundation of software engineering principles does. So, don\u2019t go on searching for the best programming language.</li> <li>Choose a language that has good online support.</li> <li>Choose a language that is not scary and easy to write code in. </li> <li>My personal preference is <code>python</code>. Although, javascript is also a good option.</li> </ol> <p>Since you have come so far, I know that you have the patience and the interest to read the entire story. I tried my best to shorten the story, but the I needed to convince you of a very important step - choosing your first programming language.</p> <p>People who want to start writing code, or students who want to build their career as software developers often think which programming language they should start with. </p> <ul> <li>Some want to choose the best programming language. </li> <li>Some want a language that is famous in the industry and can help them get good jobs.</li> <li>Some want to learn the newest language in the market. It must be better than the old ones.</li> <li>Some go after building apps, and think they will learn the language on the way.</li> </ul> <p>Programming language is a tool. It doesn\u2019t make you a better developer, and will not give you better credibility.</p> <p>So\u2026.. which language should you start with ???</p> <p>That depends on what you want to achieve after learning the language.</p> <p>Yes. It\u2019s as simple as that.</p> <ul> <li>If you want to build an Android app learn Kotlin or Java.</li> <li>If you want to build an iOS app learn Swift.</li> <li>If you want to build beautiful web pages learn HTML, CSS and Javascript.</li> <li>If you are a student and want good grades in your language course, learn whatever the professor is teaching you.</li> </ul> <p>BUT \u2026 if you want to build a good career as a software engineer \u2026</p> <p>DO NOT go after searching for the best programming languages, learn how to build logical solutions to a problem.</p> <p>What do I mean by that?</p> <p>Programming languages are just tools that help humans ask computers to do stuff for them. Each programming language just makes it easier to do a certain kind of job or in some cases it is the only tool we can choose.</p> <p>For example, the browser(Chrome, Firefox etc.) understands only HTML, CSS and Javascript. You can\u2019t write a program in C++ or Java that has to be executed on the browser. An Android application needs to be written in Kotlin or Java only.</p> <p>Software developers are paid to build solutions to problems. To build efficient and stable solutions, one would eventually have to work on multiple languages.</p> <p>The real deal lies in using the best tool to solve the problem at hand.</p> <p>Tools(language or frameworks) that you will use to build a chat application(like WhatsApp) will be completely different from the tools to be used to build a photo sharing site like Instagram.</p> <p>Every programming language(or framework) has its strengths and weaknesses. They must be chosen based on the end result needed.</p> <p>The real question is - What knowledge should I have to easily switch between multiple languages or frameworks.</p> <p>Every language has more or less similar constructs and tools to get things done. Some common constructs are -</p> <ol> <li>Variables</li> <li>Arithmetic operations - addition, subtraction, multiplication, division etc.</li> <li>Conditional statements - If a condition is true perform some action.</li> <li>Looping constructs - Repeat a task certain number of times.</li> <li>Object Oriented Programming - A certain pattern of writing code</li> <li>Functional Programming - Another pattern of writing code</li> <li>Error handling</li> <li>etc.</li> </ol> <p>Understand these basics. Learn where and how to use them. If you are comfortable using these patterns in one language, you can use them in other languages also.</p> <p>Learn one language first. Learn it well. Be very comfortable in that language.</p> <p>You don't want to be this guy  -</p> <p></p> <p>(Source: http://geek-and-poke.com/geekandpoke/2009/7/25/the-art-of-programming-part-2.html)</p> <p>Coming to the million dollar question of What Should My First Programming Language?</p> <p>Your first programming language show should be -</p> <ol> <li>Should be simple to write in, so that you can concentrate on the solution rather than the language syntax.</li> <li>Should be easier to find help on the internet. Common problems have been addressed in online forums like StackOverflow etc.</li> <li>Should have an ecosystem of stable libraries for common tasks like building web services, parsing files of common formats(json etc.).</li> <li>Better if it is popular in the software industry. Eg. a language called \u2018Javascript\u2019 is very famous, but a language like \u2018Lisp\u2019 is not so famous. Working on an industry famous language adds weight to your resume.</li> <li>Since, it is very common for developers to work on web services. Your first language should have a good support building web applications.</li> </ol> <p>I would recommend to choose amongst following two languages that satisfy the above criteria -</p> <ol> <li>Python </li> <li>Javascript </li> </ol> <p>Why?</p> <ol> <li>Both are pretty easy to learn and write code in. </li> <li>Both have very good online support i.e. you can find answers to almost all the problems you will face while working in them.</li> <li>Both have a stable ecosystem of libraries. This is very important for any language.</li> </ol> <p>Python and Javascript both do not scare beginner developers.</p>"},{"location":"blog/2021/01/01/git-cheatsheet/","title":"Git Cheatsheet","text":"<p>While writing software, Version Control is very important. Every software developer must learn to use version control. Git has become the default version control tool, and a software developer can't skip learning this tool.  </p> <p>This article is intended for readers who have just started using git. Hopefully this helps them in making the git journey more fun.</p> <p>Mentioning common git commands and aliases below.</p>"},{"location":"blog/2021/01/01/git-cheatsheet/#common-git-commands","title":"Common Git Commands","text":""},{"location":"blog/2021/01/01/git-cheatsheet/#clone-a-repository","title":"Clone a repository","text":"<pre><code>git clone &lt;repository_name&gt; &lt;destination_folder&gt;\n</code></pre> <p>if <code>&lt;destination_folder&gt;</code> is not given git creates a new folder with the name of the repo.</p> <p>The following clones the official React repo, into the a new folder react into your local machine.</p> <p></p> <p>And the following clone the React repo, in the folder called <code>my-react</code>.</p> <p></p>"},{"location":"blog/2021/01/01/git-cheatsheet/#to-start-a-new-git-tracked-repo","title":"To start a new git tracked repo","text":"<pre><code>mkdir new-project\n\ufeff\ngit init     # Makes the current directory a git tracked repo\n\n# Add files to the new-project\n# Its a good idea to add a 'README.md' file and a '.gitignore' file and then make your first commit.\n\ufeff\n# Adds all the files in the current directory\ngit add .\n\ufeff\n# Make your first commit and give a meaningful message\ngit commit -m \"Add README and gitignore\"\n</code></pre>"},{"location":"blog/2021/01/01/git-cheatsheet/#configure-your-git-installation","title":"Configure your git installation","text":"<p>Add your username and email to git config so that git can add them in each that you make.</p> <pre><code>git config --global user.name \"your_username\"\ngit config --global user.email your_email@example.com\n</code></pre> <p>Git shows the user details in logs etc.</p> <p></p>"},{"location":"blog/2021/01/01/git-cheatsheet/#making-changes-in-your-local-and-push-it-to-remote-repo","title":"Making changes in your local and push it to remote repo","text":"<pre><code># Make changes in the files\n\n# Check which files has changes\ngit status\n</code></pre> <pre><code># Add changes to the staging area\ngit add &lt;file1&gt; &lt;file2&gt;\n\n# Or to add all changes\ngit add .\n\n# Files in the staging area are shown in green colour\n</code></pre> <pre><code> # Commit the changes in the staging area\ngit commit -m \"A meaningful commit message\"\n\n# push the changes in the remote repo\ngit push origin &lt;current_branch_name&gt;\n</code></pre>"},{"location":"blog/2021/01/01/git-cheatsheet/#switch-between-branches","title":"Switch between branches","text":"<pre><code>git checkout &lt;branch&gt;\n</code></pre>"},{"location":"blog/2021/01/01/git-cheatsheet/#merge-your-branch-in-master","title":"Merge your branch in master","text":"<pre><code># Switch to master branch\ngit checkout master\n\ufeff\ngit merge &lt;your_branch&gt;\n\n# Might have conflicts. Resolve conflicts and then continue merging.\n\n# Check logs to see if the changes have been incorporated\ngit log\n\n# If everything looks fine, push to remote master\ngit push origin master\n</code></pre>"},{"location":"blog/2021/01/01/git-cheatsheet/#determine-what-changes-you-have-made","title":"Determine what changes you have made","text":"<pre><code>git diff &lt;filename&gt;\n</code></pre> <p>Additions and deletions are shown by + and - signs, and can be color-coded depending on the shell you use.</p>"},{"location":"blog/2021/01/01/git-cheatsheet/#useful-aliases","title":"Useful Aliases","text":"<p>Git is a very useful tool, something that developers use multiple times in a day. Typing git commands can be eased by using aliases to most common commands like <code>git status</code> or <code>git push</code>.</p> <p>Mentioning few useful aliases below. Include them in your <code>~/.bashrc</code> file. Your configuration file may vary depending on your operating system and shell. If you are using Ubuntu or Mac OS X, <code>~/.bashrc</code> is the file you need. If the file doesn't exist, create the file.</p> <pre><code>g=git\n\n# Use: ga README.md .gitignore\nga='git add'\n\n# To add deleted files also\ngaa='git add --all'\n\n# Use: gcmsg \"Meaningful commit message\"\ngcmsg='git commit -m'\n\n# To switch to another branch\n# Use: gco master\ngco='git checkout'\n\n# Use: gd &lt;filename&gt;\ngd='git diff'\n\n# Get the list of branches, and you current branch\ngb='git branch'\n\n# Use: gc -m \"A meaningful message\"\ngc='git commit -v'\n</code></pre> <p>Function to get the current branch name.</p> <pre><code>function git_current_branch() {  \n    local ref  \n    ref=$(command git symbolic-ref --quiet HEAD 2&gt; /dev/null)  \n    local ret=$?  \n    if [[ $ret != 0 ]]; then \n        [[ $ret == 128 ]] &amp;&amp; return  # no git repo.  \n        ref=$(command git rev-parse --short HEAD 2&gt; /dev/null) || return  \n    fi\n    echo ${ref#refs/heads/}\n}\n</code></pre> <p>Aliases for <code>git push</code> and <code>git pull</code>. These save typing a lot of characters, and possible typos. Very useful!</p> <p>Pull your current branch to remote.</p> <pre><code># Use:\n# git checkout &lt;your_branch&gt;\n# ggpull  # Get the latest changes from remote\n\nggpull='git pull origin $(git_current_branch)'\n</code></pre> <p>Push your current branch to remote. A new branch in remote is created, if already not present.</p> <pre><code># Use: After making commits to your current branch\n# ggpush\n\nggpush='git push origin $(git_current_branch)'\n</code></pre> <p>Hope this cheatsheet makes your git journey easier.</p> <p>Happy coding! \ud83d\ude0a</p>"},{"location":"blog/2024/01/31/hello-world/","title":"Hello world!","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>This is more text. It will not be shown in the excerpt.</p>"},{"location":"blog/2021/01/03/http---the-backbone-of-internet/","title":"HTTP - The backbone of Internet","text":"<p>Layman explanation of HTTP</p> <p>The internet(or World Wide Web) is now an inseparable part of our lives. We can't imagine our lives without the ease and information the internet provides us. Services like Google Search, WhatsApp, Facebook, Internet Banking, Online Reservations etc have transformed our lives. It goes without saying that there is great business opportunity for companies and people making online applications. </p> <p>Those who are in the business of building online applications/services, or intend to join such as business should have an understanding of the units that forms the internet as we know it today. Hence, I present you this article that talks about a technology called HTTP that is one of the building blocks of internet.</p>"},{"location":"blog/2021/01/03/http---the-backbone-of-internet/#what-the-hell-is-http","title":"What the hell is HTTP?","text":"<p>If you are viewing photos on Instagram, or watching videos on Youtube or reading this article Quepinch, the content in all these cases is stored in a computer (that is far away, may be in another country). That content has to be transferred from the remote computers to your mobile or laptop. There are millions and billions of users consuming information on their computers. To reliably serve so many consumers there is need of certain rules(also called 'protocols') to transfer the data from the storage computers to the consumers. HTTP is one of those rules. And it is a very important rule. Almost everything that you see in our web browser or mobile uses HTTP!</p> <p>HTTP is an acronym that stands for HyperText Transfer Protocol.</p> <p>HTTP is a set of rules that specifies how two computers can talk to each other over the internet.</p>"},{"location":"blog/2021/01/03/http---the-backbone-of-internet/#who-made-http-and-where-is-it-written","title":"Who made HTTP and where is it written ?","text":"<p>The first version of HTTP is called HTTP 0.9 and was developed by Tim Berners-Lee in 1989. </p> <p></p> <p>(Image Source: Wikipedia)</p> <p>Tim is an engineer and computer scientist. He is best known as the inventor of World Wide Web.</p> <p>The HTTP protocol documentation is maintained by IETF(Internet Engineering Task Force) which is an organisation that helps develop and promote internet standards such as the HTTP protocol.</p> <p>The exact definition of the protocol is written in a text document known as Request for Comments(RFC), which is a common way specifying specifications in the technical community. </p> <p>Any protocol, in fact anything, can't be developed without imperfections in the first shot. Hence, multiple versions needs to be developed, where each version is better than the previous one. HTTP also has multiple versions. The most commonly used version is HTTP 1.1.</p> <p>The latest version for HTTP 1.1 is mention in RFC 7230.</p>"},{"location":"blog/2021/01/03/http---the-backbone-of-internet/#if-i-want-to-learn-developing-online-apps-do-i-need-to-know-everything-http-documentation-says","title":"If I want to learn developing online apps, do I need to know everything HTTP documentation says?","text":"<p>Fortunately no. </p> <p>The exact rules are implemented by the browser. Each browser is developed and enhanced by their respective team of developers. The team should ensure that their browser software is up to date with the HTTP protocols and the continuous enhancements being made in it.</p> <p>As a software developer, one must know the basics of HTTP i.e. the principles on which it is designed. This helps to understand how the browser will behave in different situations. What different cases you can encounter while writing your web application.</p> <p>Another post HTTP basics coming soon!</p>"},{"location":"blog/2021/01/03/http---the-backbone-of-internet/#but-i-have-also-heard-about-https-is-it-the-plural-of-http","title":"But, I have also heard about HTTPS. Is it the plural of HTTP?","text":"<p>HTTPS is another protocol. HTTPS stands for HTTP Secure which, as the name suggests, is HTTP with enhanced security. HTTPS ensures that the data that is being transferred from one computer to another is *encrypted so that bad guys can't read your data.</p> <p>*Encryption is the process of transforming data into some garbage values so that people can't make sense from it. The sender computer encrypts and sends the data to the receiver, and only the receiver has the knowledge to transform the data into its original form. Hence, even if a third person possesses the encrypted data, he/she can't understand it.</p> <p>Without HTTPS services like internet banking, chatting applications(like WhatsApp), Instagram etc. can't function!</p> <p>HTTPS is mandatory for online security. You must not trust websites that do not operate on HTTPS. Anyone can read your data in non HTTPS websites.</p> <p>Browser can show visual signs about a secured site running on HTTPS vs an unsecured site running on plain HTTP. The following images are from Chrome browser.</p> <p></p> <p></p> <p>Image</p>"},{"location":"blog/2021/02/27/vim-emergency/","title":"Vim Emergency","text":"<p>Vim commands that you must know</p> <p>Our friend Susan is debugging a production issue. She figured out that a configuration file on the production needs to be updated. Her manager asked said, \"Susan, this is a piece of cake! You can find the file in <code>/etc/</code>\".</p> <p>Susan ssh'd into the server. She knew that a file can be read in vim, and she opens the file in vim. OMG! She is trying to edit the text but nothing is happening! What is going on.</p> <p>Susan has no time for long tutorials. She needs something crip and to the point. If you are Susan read on ...</p> <p>Our friend Susan needs to fix a production issue by updating a configuration file on the production server.</p> <p>She ssh'd into the server. She needs to edit the file and VIM is the only editor available. She has no clue how to edit text in vim.  </p> <p>If you are Susan, read on ...</p> <ol> <li>First of all, vim is a terminal application which means the mouse won't work.    You need to use the keyboard to move around.</li> <li>Vim has a writing mode and a 'not writing mode'(called 'normal mode').    Vim starts in normal mode, hence typing letters will not work.</li> <li>Use arrow keys to move left, right, up and down in the file.(Simple    navigation keys are mentioned in the next section.</li> <li>To start inserting text type <code>i</code>.</li> <li>When you are done, press <code>&lt;ESC&gt;</code> to stop inserting text and go back to normal    mode.</li> <li>To save the file, hit <code>&lt;ESC&gt;</code> then type <code>:write</code>.</li> <li>To quit the file, hit <code>&lt;ESC&gt;</code> then type <code>:quit</code>.</li> <li>If you think you messed up and want to exit without saving the file - <code>:quit!</code>.</li> </ol>"},{"location":"blog/2021/02/27/vim-emergency/#moving-in-the-file","title":"Moving in the file","text":"<ol> <li><code>gg</code>: Go to the first line.</li> <li><code>G</code>(Uppercase g): Go to the last line.</li> <li><code>Ctrl+u</code>: Page up</li> <li><code>Ctrl_d</code>: Page down</li> </ol>"},{"location":"software-engg/go-concurrency/","title":"Go Concurrency","text":""},{"location":"software-engg/go-concurrency/#data-races","title":"Data Races","text":"<pre><code>// Sample program to show how to create race conditions in\n// our programs. We don't want to do this.\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\n// counter is a variable incremented by all goroutines.\nvar counter int\n\nfunc main() {\n\n    // Number of goroutines to use.\n    const grs = 2\n\n    // wg is used to manage concurrency.\n    var wg sync.WaitGroup\n    wg.Add(grs)\n\n    // Create two goroutines.\n    for g := 0; g &lt; grs; g++ {\n        go func() {\n            for i := 0; i &lt; 2; i++ {\n\n                // Capture the value of Counter.\n                value := counter\n\n                // Increment our local value of Counter.\n                value++\n\n                // fmt.Println(value)\n\n                // Store the value back into Counter.\n                counter = value\n            }\n\n            wg.Done()\n        }()\n    }\n\n    // Wait for the goroutines to finish.\n    wg.Wait()\n    fmt.Println(\"Final Counter:\", counter)\n}\n</code></pre> <pre><code>- Build and run. Output?\n- Uncomment line 33. Build and run.\n- GOMAXPROCS=1 ./example1  # Run on single core\n- GOMAXPROCS=2 ./example1  # Run on two cores\n- go build -race\n  ./example1\n</code></pre> <p>Atomic </p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n    \"sync/atomic\"\n)\n\n// counter is a variable incremented by all goroutines.\nvar counter int64\n\nfunc main() {\n\n    // Number of goroutines to use.\n    const grs = 2\n\n    // wg is used to manage concurrency.\n    var wg sync.WaitGroup\n    wg.Add(grs)\n\n    // Create two goroutines.\n    for g := 0; g &lt; grs; g++ {\n        go func() {\n            for i := 0; i &lt; 2; i++ {\n                atomic.AddInt64(&amp;counter, 1)\n                fmt.Println(counter)\n            }\n\n            wg.Done()\n        }()\n    }\n\n    // Wait for the goroutines to finish.\n    wg.Wait()\n\n    // Display the final value.\n    fmt.Println(\"Final Counter:\", counter)\n}\n</code></pre> <p>Mutexes</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\n// counter is a variable incremented by all goroutines.\nvar counter int\n\n// mutex is used to define a critical section of code.\nvar mutex sync.Mutex\n\nfunc main() {\n\n    // Number of goroutines to use.\n    const grs = 2\n\n    // wg is used to manage concurrency.\n    var wg sync.WaitGroup\n    wg.Add(grs)\n\n    // Create two goroutines.\n    for g := 0; g &lt; grs; g++ {\n        go func() {\n            for i := 0; i &lt; 2; i++ {\n\n                // Only allow one goroutine through this critical section at a time.\n                mutex.Lock()\n                {\n                    // Capture the value of counter.\n                    value := counter\n\n                    // Increment our local value of counter.\n                    value++\n\n                    // Store the value back into counter.\n                    counter = value\n                }\n                mutex.Unlock()\n                // Release the lock and allow any waiting goroutine through.\n            }\n\n            wg.Done()\n        }()\n    }\n\n    // Wait for the goroutines to finish.\n    wg.Wait()\n    fmt.Printf(\"Final Counter: %d\\n\", counter)\n}\n</code></pre>"},{"location":"software-engg/go-concurrency/#channels","title":"Channels","text":"<p>Example of channels.</p> <ul> <li>Receive is blocked till it gets a msg.</li> <li>Send is blocked until the msg is received.</li> <li>Received is unblocked first(by nanosec) and then send is unblocked.</li> <li>Receive and send is atomic operation.</li> <li>The two Println statements can happen in any order.</li> </ul> <pre><code>func process() {\n    ch := make(chan string)\n\n    go func() {\n        d := &lt;-ch\n        fmt.Println(\"child : recv'd signal :\", d)\n    }()\n\n    time.Sleep(time.Duration(rand.Intn(500)) * time.Millisecond)\n    ch &lt;- \"data\"\n    fmt.Println(\"parent : sent signal\")\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre> <p>Example of Buffered Channel</p> <pre><code>func process() {\n    children := 20\n    // Use a buffered channel\n    ch := make(chan string, children)\n\n    for c := 0; c &lt; children; c++ {\n        go func(child int) {\n            time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)\n            ch &lt;- \"data\"\n            fmt.Println(\"child : sent signal :\", child)\n        }(c)\n    }\n\n    for children &gt; 0 {\n        d := &lt;-ch\n        children--\n        fmt.Println(d)\n        fmt.Println(\"parent : recv'd signal :\", children)\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre>"},{"location":"software-engg/go-concurrency/#concurrency-patterns","title":"Concurrency Patterns","text":""},{"location":"software-engg/go-concurrency/#wait-for-task","title":"Wait For Task","text":"<pre><code>// waitForTask: In this pattern, the parent goroutine sends a signal to a\n// child goroutine waiting to be told what to do.\nfunc waitForTask() {\n    ch := make(chan string)\n\n    go func() {\n        d := &lt;-ch\n        fmt.Println(\"child : recv'd signal :\", d)\n    }()\n\n    time.Sleep(time.Duration(rand.Intn(500)) * time.Millisecond)\n    ch &lt;- \"data\"\n    fmt.Println(\"parent : sent signal\")\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre> <ul> <li>Receiver is blocked.</li> <li>Sender is blocked until the signal is received by the receiver.</li> <li>ONLY atomic operation is the exchange of signal b/w sender and receiver.</li> <li>Receiver gets unblocked nanoseconds before the sender.</li> <li>The two Println statements can happen in any order.</li> <li>Eg. Used in pooling</li> </ul>"},{"location":"software-engg/go-concurrency/#wait-for-result","title":"Wait for Result","text":"<pre><code>// waitForResult: In this pattern, the parent goroutine waits for the child\n// goroutine to finish some work to signal the result.\nfunc waitForResult() {\n    ch := make(chan string)\n\n    go func() {\n        time.Sleep(time.Duration(rand.Intn(500)) * time.Millisecond)\n        ch &lt;- \"data\"\n        fmt.Println(\"child : sent signal\")\n    }()\n\n    d := &lt;-ch\n    fmt.Println(\"parent : recv'd signal :\", d)\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre> <ul> <li>Opposite of Wait for Task </li> </ul>"},{"location":"software-engg/go-concurrency/#pooling","title":"Pooling","text":"<pre><code>// pooling: In this pattern, the parent goroutine signals 100 pieces of work\n// to a pool of child goroutines waiting for work to perform.\nfunc pooling() {\n    ch := make(chan string)\n\n    g := runtime.GOMAXPROCS(0)\n    for c := 0; c &lt; g; c++ {\n        go func(child int) {\n            for d := range ch {\n                fmt.Printf(\"child %d : recv'd signal : %s\\n\", child, d)\n            }\n            fmt.Printf(\"child %d : recv'd shutdown signal\\n\", child)\n        }(c)\n    }\n\n    const work = 100\n    for w := 0; w &lt; work; w++ {\n        ch &lt;- \"data\"\n        fmt.Println(\"parent : sent signal :\", w)\n    }\n\n    close(ch)\n    fmt.Println(\"parent : sent shutdown signal\")\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre> <p>Range over a channel for d:= range ch : </p> <ul> <li>Block till you receive data </li> <li>Iterate over the data retreival until the channel is closed ie close(ch) will terminate the for loop.</li> </ul> <p>Pooling pattern:</p> <ul> <li>Multiple child goroutines waiting for work from the master goroutine on a single channel.</li> <li>Child goroutines exit when the channel is closed.</li> </ul>"},{"location":"software-engg/go-concurrency/#fanout","title":"Fanout","text":"<pre><code>// fanOut: In this pattern, the parent goroutine creates 2000 child goroutines\n// and waits for them to signal their results.\nfunc fanOut() {\n    children := 20\n    // Use a buffered channel\n    ch := make(chan string, children)\n\n    for c := 0; c &lt; children; c++ {\n        go func(child int) {\n            time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)\n            ch &lt;- \"data\"\n            fmt.Println(\"child : sent signal :\", child)\n        }(c)\n    }\n\n    for children &gt; 0 {\n        d := &lt;-ch\n        children--\n        fmt.Println(d)\n        fmt.Println(\"parent : recv'd signal :\", children)\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre> <ul> <li>Start a group of child goroutines that send data to the main goroutine over a buffered channel.</li> <li>1 buffer slot per child goroutine </li> <li>Send is not blocked and hence no latency in send.</li> <li>Receive might be blocked if there is no data in the channel. </li> <li>If 2 sends finish at the same time, there might be blocking to send data to the channel.</li> </ul>"},{"location":"software-engg/go-concurrency/#fanout-semaphore","title":"Fanout Semaphore","text":"<pre><code>// fanOutSem: In this pattern, a semaphore is added to the fan out pattern\n// to restrict the number of child goroutines that can be schedule to run.\nfunc fanOutSem() {\n    children := 2000\n    ch := make(chan string, children)\n\n    g := runtime.GOMAXPROCS(0)\n    sem := make(chan bool, g)\n\n    for c := 0; c &lt; children; c++ {\n        go func(child int) {\n            sem &lt;- true\n            {\n                t := time.Duration(rand.Intn(200)) * time.Millisecond\n                time.Sleep(t)\n                ch &lt;- \"data\"\n                fmt.Println(\"child : sent signal :\", child)\n            }\n            &lt;-sem\n        }(c)\n    }\n\n    for children &gt; 0 {\n        d := &lt;-ch\n        children--\n        fmt.Println(d)\n        fmt.Println(\"parent : recv'd signal :\", children)\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre>"},{"location":"software-engg/go-concurrency/#cancellation","title":"Cancellation","text":"<pre><code>// cancellation: In this pattern, the parent goroutine creates a child\n// goroutine to perform some work. The parent goroutine is only willing to\n// wait 150 milliseconds for that work to be completed. After 150 milliseconds\n// the parent goroutine walks away.\nfunc cancellation() {\n    duration := 150 * time.Millisecond\n    ctx, cancel := context.WithTimeout(context.Background(), duration)\n    defer cancel()\n\n    ch := make(chan string, 1)\n\n    go func() {\n        time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)\n        ch &lt;- \"data\"\n    }()\n\n    select {\n    case d := &lt;-ch:\n        fmt.Println(\"work complete\", d)\n\n    case &lt;-ctx.Done():\n        fmt.Println(\"work cancelled\")\n    }\n\n    time.Sleep(time.Second)\n    fmt.Println(\"-------------------------------------------------\")\n}\n</code></pre> <p>Channels aren't like files; you don't usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop</p> <p>When you are creating a Goroutine decide when and how will it end. Provide a way to terminate the goroutine. </p> <p>When you create an API that has concurrency, provide to the caller a way to terminate the goroutine. Let the caller manage concurrency at the lowest level.</p>"},{"location":"software-engg/go-concurrency/#gracefully-end-multiple-goroutines","title":"Gracefully End Multiple Goroutines","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"sync\"\n    \"time\"\n)\n\nfunc main() {\n\n    ctx, cancel := context.WithCancel(context.Background())\n    defer cancel()\n\n    wg := sync.WaitGroup{}\n\n    wg.Add(1)\n    go tick(ctx, &amp;wg)\n\n    wg.Add(1)\n    go tock(ctx, &amp;wg)\n\n    wg.Add(1)\n    go server(ctx, &amp;wg)\n\n    // listen to Ctrl-C\n    c := make(chan os.Signal, 1)\n    signal.Notify(c, os.Interrupt)\n\n    // Block on the channel for Ctrl-C\n    &lt;-c\n    fmt.Println(\"main: received Ctrl-C - shutting down\")\n\n    // tell the goroutines to stop\n    fmt.Println(\"main: signalling goroutines to stop\")\n    cancel()\n\n    // wait for the goroutines to finish\n    wg.Wait()\n    fmt.Println(\"main: all goroutines have signalled me that they have finished\")\n}\n\nfunc tick(ctx context.Context, wg *sync.WaitGroup) {\n    defer wg.Done()\n\n    fmt.Println(\"tick: starting...\")\n\n    ticker := time.NewTicker(3 * time.Second)\n    defer ticker.Stop()\n\n    for {\n        select {\n        case now := &lt;-ticker.C:\n            fmt.Printf(\"tick: tick %s\\n\", now.UTC().Format(\"20060102-150405.000000000\"))\n        case &lt;-ctx.Done():\n            fmt.Println(\"tick: caller asked me to stop\")\n            return\n        }\n    }\n}\n\nfunc tock(ctx context.Context, wg *sync.WaitGroup) {\n    defer wg.Done()\n\n    fmt.Println(\"tock: starting...\")\n\n    ticker := time.NewTicker(5 * time.Second)\n    defer ticker.Stop()\n\n    for {\n        select {\n        case now := &lt;-ticker.C:\n            fmt.Printf(\"tock: tock %s\\n\", now.UTC().Format(\"20060102-150405.000000000\"))\n        case &lt;-ctx.Done():\n            fmt.Println(\"tock: caller asked me to stop\")\n            return\n        }\n    }\n}\n\nfunc server(ctx context.Context, wg *sync.WaitGroup) {\n\n    r := http.NewServeMux()\n    r.HandleFunc(\"/hello\", helloHandler)\n\n    srv := http.Server{\n        Handler: r,\n        Addr:    fmt.Sprintf(\"%s:%s\", \"localhost\", \"8080\"),\n    }\n\n    // goroutine blocks on ctx.Done and then does graceful shutdown\n    go func() {\n        // decrement wg post shutdown\n        defer wg.Done()\n\n        &lt;-ctx.Done()\n        fmt.Println(\"server: received signal to stop the server\")\n\n        // Need server shutdown timeout because srv.Shutdown() waits indefinitely\n        // for active connections to become idle and the shutdown. Some zombie\n        // connenctions can take forever to become idle.\n        SERVER_SHUTDOWN_TIMEOUT := 5 // read from config\n        shutdownTimeoutCtx, cancel := context.WithTimeout(\n            context.Background(),\n            time.Duration(SERVER_SHUTDOWN_TIMEOUT)*time.Second,\n        )\n\n        defer func() {\n            // close DB conn, redis conn etc.\n            cancel()\n        }()\n\n        if err := srv.Shutdown(shutdownTimeoutCtx); err != nil {\n            fmt.Printf(\"server: shutdown error: %v \\n\", err)\n        }\n        fmt.Println(\"server: successfully shutdown\")\n    }()\n\n    fmt.Println(\"server: starting server...\")\n    if err := srv.ListenAndServe(); err != nil &amp;&amp; err != http.ErrServerClosed {\n        fmt.Printf(\"server: cannot start server. error: %v \\n\", err)\n    }\n}\n\nfunc helloHandler(w http.ResponseWriter, req *http.Request) {\n    io.WriteString(w, \"Hello, world!\\n\")\n}\n</code></pre>"},{"location":"software-engg/go-errors/","title":"Go Errors","text":"<ol> <li>Error are values. You are assign errors to variables, accept as function args and return from functions.</li> <li>Error is an interface - Anything that implements the function func Error() string is an error.</li> </ol> <p>Declare Errors using</p> <pre><code>type NotFoundError struct {\n    Name string\n}\n\nfunc (e *NotFoundError) Error() string { return e.Name + \": not found\" }\n\n// OR // \n\nerr := fmt.Errorf(\"I am an error. %v\", someVar)\n\n// OR // \n\nerr := errors.New(\"I am an error.\")\n</code></pre>"},{"location":"software-engg/go-errors/#comparing-errors","title":"Comparing Errors","text":"<pre><code>/* The errors.Is function compares an error to a value. */\n\n// Similar to:\n//   if err == ErrNotFound { \u2026 }\nif errors.Is(err, ErrNotFound) { ... }\n\n/* The As function tests whether an error is a specific type. */\n\n// Similar to:\n//   if e, ok := err.(*QueryError); ok { \u2026 }\nvar e *QueryError\n// Note: *QueryError is the type of the error.\nif errors.As(err, &amp;e) { /* err is a *QueryError, and e is set to the error's value */ }\n</code></pre> <p>Wrapping Errors </p> <pre><code>if err != nil {\n   // Return an error which unwraps to err.\n   return fmt.Errorf(\"decompress %v: %w\", name, err)\n}\n...\nif errors.Is(err, ErrPermission) {...}\n</code></pre>"},{"location":"software-engg/go-errors/#defer-panic-recover","title":"Defer, Panic &amp; Recover","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    f()\n    fmt.Println(\"Returned normally from f.\")\n}\n\nfunc f() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Println(\"Recovered in f\", r)\n        }\n    }()\n    fmt.Println(\"Calling g.\")\n    g(0)\n    fmt.Println(\"Returned normally from g.\")\n}\n\nfunc g(i int) {\n    if i &gt; 3 {\n        fmt.Println(\"Panicking!\")\n        panic(fmt.Sprintf(\"%v\", i))\n    }\n    defer fmt.Println(\"Defer in g\", i)\n    fmt.Println(\"Printing in g\", i)\n    g(i + 1)\n}\n</code></pre>"},{"location":"software-engg/go-errors/#references","title":"References","text":"<ol> <li>Panic Handling in json built-in pkg</li> <li>Errors are values - The Go Programming Language</li> <li>Working with Errors in Go 1.13 - The Go Programming Language</li> <li>Don\u2019t just check errors, handle them gracefully</li> <li>GopherCon 2016:  Dave Cheney - Dont Just Check Errors Handle Them Gracefully</li> </ol>"},{"location":"software-engg/go-types/","title":"Go Types","text":"<p>\"Regardless of the language, type touches every aspect of programming syntax. A good understand of types and pointers is critical to good programming.\"  - William (Bill) Kennedy</p> <p>Type provides 2 important info that is imp for the programmer and the compiler.</p> <ol> <li>The amount of memory, in bytes, to look at</li> <li>The representation of those bytes</li> </ol> <p>The Go language provides these basic numeric types:</p> <pre><code>Unsigned Integers\nuint8, uint16, uint32, uint64\n\nSigned Integers\nint8, int16, int32, int64\n\nReal Numbers\nfloat32, float64\n\nPredeclared Integers\nuint, int, uintptr\n</code></pre> <p>The uint8 contains a base 10 number using one byte of memory. The value can be between 0 to 255.</p> <p>The int32 contains a base 10 number using 4 bytes of memory. The value can be between -2147483648 to 2147483647. ie 1st bit is for sign notation(+/-), rest 31 bits give the number value. -2^31 .. 0 .. (2^31-1)</p> <p>The predeclared integers get mapped based on the architecture you are building the code against. On a 64 bit OS, int will map to int64 and on a 32 bit OS, it will be mapped to int32.</p> <p>Go uses IEEE 754 standard for presenting floats.</p> <p>To determine the size of a variable use <code>unsafe.SizeOf()</code>. Eg.  <pre><code>type Example struct {\n    BoolValue bool\n    IntValue int16\n    FloatValue float32\n}\n\ne := Example{\n    BoolValue:  true,\n    IntValue:   10,\n    FloatValue: 3.141592,\n}\n\nfmt.Println(unsafe.SizeOf(e.BoolValue))     // 1. Bool = 1 byte\nfmt.Println(unsafe.SizeOf(e)    // 8. 1+2+4+padding\n// Read about Allignment boundary to know about padding\n</code></pre></p> <p>We can only manipulate memory when we are working with a numeric type and the assignment operator (=) is how we do it.  To make life easier for us, Go has created some complex types that support the assignment operator directly. Some of these types are strings, arrays and slices. These complex types abstract the manipulation of the underlining numeric types that can be found in each implementation. </p>"},{"location":"software-engg/go-types/#numeric-types","title":"Numeric Types","text":"<pre><code>uint8       the set of all unsigned  8-bit integers (0 to 255)\nuint16      the set of all unsigned 16-bit integers (0 to 65535)\nuint32      the set of all unsigned 32-bit integers (0 to 4294967295)\nuint64      the set of all unsigned 64-bit integers (0 to 18446744073709551615)\n\nint8        the set of all signed  8-bit integers (-128 to 127)\nint16       the set of all signed 16-bit integers (-32768 to 32767)\nint32       the set of all signed 32-bit integers (-2147483648 to 2147483647)\nint64       the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)\n\nfloat32     the set of all IEEE-754 32-bit floating-point numbers\nfloat64     the set of all IEEE-754 64-bit floating-point numbers\n\ncomplex64   the set of all complex numbers with float32 real and imaginary parts\ncomplex128  the set of all complex numbers with float64 real and imaginary parts\n\nbyte        alias for uint8\nrune        alias for int32Ext\n</code></pre>"},{"location":"software-engg/go-types/#defined-type","title":"Defined Type","text":"<p>The new type is called a defined type. It is different from any other type, including the type it is created from. Eg. <code>type Number int</code> (Number is composed from int)</p> <p>Go compiler does NOT cast the variables unless you explicitly ask it</p> <pre><code>type int32Ext int32\n\nfunc main() {\n    // Cast the number 10 to a value of type Jill\n    // The compiler allows the value to be assigned because the numeric type\n    // is on the right side of the assignment operator. The compiler knows the\n    // assignment is safe.\n    var jill int32Ext = 10\n\n    // Assign the value of jill to jack\n    // ** cannot use jill (type int32Ext) as type int32 in assignment **\n    // The compiler respects that jill is of type int32Ext and makes no\n    // assumptions about the safeness of the assignment.\n    var jack int32 = jill       // Implicit casting doesn't work even thought the memory layout is same.\n\n    // Assign the value of jill to jack by casting\n    // ** the compiler is happy **\n    var jack int32 = int32(jill)    // Explicit casting\n\n    fmt.Printf(\"%d\\n\", jack)\n}\n</code></pre>"},{"location":"software-engg/go-types/#composite-types","title":"Composite Types","text":"<p>Composite types\u2014 1. array 2. struct 3. pointer 4. function 5. interface 6. slice 7. map 8. channel \u2014may be constructed using type literals.</p>"},{"location":"software-engg/go-types/#overflow-error","title":"Overflow Error","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\n   // initializing with the maximum allowed negative decimal value\n   var num float32 = -3.4E+38\n\n   // printing the value and data type \n   fmt.Printf(\"Value is: %f and type is: %T\\n\", num, num);   \n\n   // making the value out of range by multiply by +/-10 \n   var num_n float32 = num*10\n   var num_p float32 = num*-10\n\n   // printing out new value and type\n   fmt.Printf(\"Value is: %f and type is: %T\\n\", num_n, num_n);\n   fmt.Printf(\"Value is: %f and type is: %T\\n\", num_p, num_p);   \n\n}\n</code></pre>"},{"location":"software-engg/go-types/#floating-point-errorin-calculation","title":"Floating Point Error(in calculation)","text":"<pre><code>// float64 \nvar n float64 = 0\nfor i := 0; i &lt; 10; i++ {\n   n += 0.1\n}\nfmt.Println(n)      // 0.9999999999999999\nprintln(n == 1)     // false\n\n// float32\nvar n float32 = 0\nfor i := 0; i &lt; 10; i++ {\n   n += 0.1\n}\nfmt.Println(n)      // 1.0000001\nprintln(n == 1)     // false\n</code></pre> <p>Solution: Use decimal.Decimal to avoid floating point errors.</p> <p>https://docs.python.org/3/tutorial/floatingpoint.html</p>"},{"location":"software-engg/local-setup/","title":"Local Setup","text":"<p>Tools &amp; setup for a great developer experience</p> <p>Link to my dotfiles Quick guide to install &amp; work with them</p>"},{"location":"software-engg/local-setup/#working-with-the-terminal","title":"Working with the Terminal","text":"<p>Why is learning terminal important for new devs? Tools I use to work efficiently with the terminal</p>"},{"location":"software-engg/local-setup/#terminal-emulator-alacrity","title":"Terminal emulator: alacrity","text":"<p>What is a terminal emulator?</p>"},{"location":"software-engg/local-setup/#brew-on-macos","title":"<code>brew</code> on MacOS","text":""},{"location":"software-engg/local-setup/#tmux","title":"tmux","text":""},{"location":"software-engg/local-setup/#text-editor-neovim","title":"Text Editor: neovim","text":"<p>What do you need from a modern text editor?</p>"},{"location":"software-engg/local-setup/#docker","title":"docker","text":""},{"location":"software-engg/local-setup/#fzf","title":"fzf","text":""},{"location":"software-engg/local-setup/#zoxide","title":"zoxide","text":""},{"location":"software-engg/local-setup/#git","title":"git","text":"<p>git aliases for fast dev work</p>"},{"location":"software-engg/local-setup/#vifm","title":"vifm","text":""},{"location":"software-engg/local-setup/#envrc","title":"envrc","text":""},{"location":"software-engg/neovim-intro/","title":"Vim/Neovim Introduction","text":"<p>Neovim Kickstart Guide by TJ, Nvim core maintainer https://www.youtube.com/watch?v=m8C0Cq9Uv9o</p> <p>Todo:</p> <ol> <li>Vim vs neovim</li> <li>Modal text editing. Why is it imp in 2024?</li> <li>Other modal editors: emacs, zed, helix</li> <li>Vim must know commands. Link to my blog post.</li> <li>How to start you neovim journey? vimtutor, kickstart guide, lazyvim</li> </ol>"},{"location":"software-engg/neovim/","title":"My Neovim Workflow","text":"<p>WIP</p> <p>While the cursor is on a file -</p> <p><code>-</code> : stage or unstage a file or multiple files. Ctrl+v for file selection in range. <code>=</code> : Inline git diff. Not very useful! <code>Enter</code> : Opens the file in the horizontal window.</p> <p>While editing a file -</p> <ul> <li><code>:Gvdiff</code> : diff in vsplit</li> <li><code>[c ]c</code> : Prev and next hunk</li> </ul> <p>Stage / Unstage the open file:</p> <ul> <li><code>Gw</code> : Save &amp; stage the current file.</li> <li><code>Gread</code> : Remove the unstaged changes in the current file</li> <li><code></code> : Stage a hunk</li> <li><code></code> : Preview a hunk</li> <li> <p><code></code> : Unstage a hunk</p> </li> <li> <p><code>G commit -m \"\"</code> : Commit staged changes</p> </li> </ul> <p>File history -</p> <ul> <li><code>Gblame</code> : </li> <li><code>G log</code> : Git log of current file in a hsplit window<ul> <li>View files changed in a commit</li> <li>Diff in a commit : <code>Enter</code> on the commit id</li> </ul> </li> </ul> <p><code>sp</code>, <code>vsp</code> : open same buffer in split or vsplit <code>:tab sp</code> : opens the same buffer in a new tab</p> <p>Resolving conflicts using Fugitive -</p> <ul> <li>http://vimcasts.org/episodes/fugitive-vim-resolving-merge-conflicts-with-vimdiff/</li> <li>https://www.youtube.com/watch?v=vpwJ7fqD1CE</li> </ul> <p>Telescope Integration -</p> <ul> <li>Scroll the preview window?</li> <li><code>:Telescope git_</code> use tab to autocomplete</li> </ul> <p>Text objects while programming -</p> <p>https://www.youtube.com/watch?v=FuYQ7M73bC0</p>"},{"location":"software-engg/python-concurrency/","title":"Python Concurrency (Multi-threading concepts)","text":"<p>Concepts to consider:</p> <ol> <li>inter-thread communication: group of threads talk to each other to manage work</li> <li>thread synchronization: only one thread should at a time</li> <li>error handling in threads</li> <li>i/o is shared in threads? ie all threads print to the same stdout stream?</li> </ol> <p>Java has wait() and notifyAll() to enable multi-threaded problems</p> <p>In computer systems, synchronization is a little more general; it refers to relationships among events\u2014any number of events, and any kind of relationship (before, during, after). Eg.</p> <ol> <li>Serialization: Event A must happen before Event B.</li> <li>Mutual exclusion: Events A and B must not happen at the same time.</li> </ol> <p>When sync problem exists?</p> <ol> <li>Mutli threads on a single processor </li> <li>Multi threads(processes) on a multiple cores.</li> </ol> <p>For the purpose of sync problems, both cases are same.</p> <p>2 threads can serailize events by <code>Message Passing</code>. Eg.</p> <pre><code>Thread A (You)\n1 Eat breakfast 1\n2 Work 2\n3 Eat lunch 3\n4 Call Bob\n\nThread B (Bob)\n1 Eat breakfast \n2 Wait for a call \n3 Eat lunch\n</code></pre> <p>Thread B waits at B.2 for a msg from Thread A.</p> <p>Note: In this case, we would say that you and Bob ate lunch sequentially, because we know the order of events, and you ate breakfast concurrently, because we don\u2019t.</p> <p>Two events are concurrent if we cannot tell by looking at the program which will happen first.</p> <p>Concurrent programs are often non-deterministic, which means it is not possible to tell, by looking at the program, what will happen when it executes.</p> <p>Non-determinism is one of the things that makes concurrent programs hard to debug. A program might work correctly 1000 times in a row, and then crash on the 1001st run, depending on the particular decisions of the scheduler.  These kinds of bugs are almost impossible to find by testing; they can only be avoided by careful programming.</p> <p>Problem of synchronization occurs when multiple threads try to access a shared  resource(memory location). Access patterns can be -</p> <ol> <li>Concurrent reads: Safe as data is not changed.</li> <li> <p>Concurrent writes: Eg. </p> <p><pre><code># what is the final value of x? What value gets printed?\nTh A\nx = 5\nprint(x)\n\nTh B\nx = 7\n</code></pre> 3. Concurrent updates:</p> <p><pre><code>Th A\ncount = count + 1\n\nTh B\ncount = count + 1\n</code></pre> This increment is not atomic. Infact, it generates two instructions - <pre><code>temp = count\ncount = temp + 1\n</code></pre></p> <p>The thread can be interrupted between these two instructions.</p> </li> </ol> <p>There can be multiple patterns in synchronization of threads. We will explore  them later.</p>"},{"location":"software-engg/python-concurrency/#solving-synchronization-problems","title":"Solving Synchronization Problems","text":"<p>Synchronization problems can be solved if threads can talk to each other. This  is called <code>message passing</code>. Operating System provide a simple data structure  called <code>Semaphore</code> to enable message passing b/w threads.</p> <p>In real life a semaphore is a system of signals used to communicate visually, usually with flags, lights, or some other mechanism.</p> <p>A semaphore is like an integer, with three differences:</p> <ol> <li> <p>When you create the semaphore, you can initialize its value to any integer,    but after that the only operations you are allowed to perform are increment    (increase by one) and decrement (decrease by one). You cannot read the    current value of the semaphore.</p> </li> <li> <p>When a thread decrements the semaphore, if the result is negative, the    thread blocks itself and cannot continue until another thread increments the    semaphore.</p> </li> <li> <p>When a thread increments the semaphore, if there are other threads wait-    ing, one of the waiting threads gets unblocked.</p> </li> </ol> <p>In most programming environments, an implementation of semaphores is avail- able as part of the programming language or the operating system. Different implementations sometimes offer slightly different capabilities, and usually re- quire different syntax.</p> <p>In this text, I will use a simple pseudo-language to demonstrate how semaphores work. </p> <pre><code>sem = Semaphore(1)\n\n# apis to work with semaphores \nsem.increment()\nsem.decrement()\n\n# another name of these actions \nsem.signal()\nsem.wait()\n\n# in python \n# python thinks a sem as a 'lock'\n# Threads waits until it will acquire a lock \n# Thread releases a lock when the task is complete \n# Thread can release a lock even before acquiting it.\nsem.release()\nsem.acquire()\n</code></pre> <p>In a multi-threaded program, the sequence of statments executed by a program in a single execution flow is called <code>execution path</code>. Each run of the  program will, probably, follow a different execution path.</p>"},{"location":"software-engg/python-concurrency/#basic-synchronization-patterns","title":"Basic Synchronization Patterns","text":""},{"location":"software-engg/python-concurrency/#1-signalling","title":"1. Signalling","text":"<p>Solves <code>serialization</code> problem: Guarantees that a section of code in one thread will run before a section of code in another thread</p> <pre><code># Guarantees that statement 1 in Th A runs before \nsem = Semaphore(0)\n\n# Th A\nstatement 1\nsem.signal()\n\nTh B\nsem.wait()\nstatement 2\n</code></pre>"},{"location":"software-engg/python-concurrency/#2-rendezvous","title":"2. Rendezvous","text":"<p>Two threads have to wait for each other to reach a common point in the  execution path.</p> <p>This is also a serialization problem.</p> <pre><code># Th A\nstatement a1\n-- rendezvous point\nstatement a2\n\n# Th B\nstatement b1\n-- rendezvous point\nstatement b2\n</code></pre> <p>ie a1 and b1 both should complete, then a2 and b2 will start concurrently. Note, a1 &amp; b1 are executed concurrently. a2 &amp; b2 are executed concurrently.</p> <pre><code>aArrived = Semaphore(0)\nbArrived = Semaphore(0)\n\n# Th A\nstatement a1\naArrived.signal()\nbArrived.wait()\nstatement a2\n\n# Th B\nstatement b1\nbArrived.signal()\naArrived.wait()\nstatement b2\n</code></pre>"},{"location":"software-engg/python-concurrency/#3-mutual-exclusion-mutex","title":"3. Mutual Exclusion (Mutex)","text":"<p>The mutex guarantees that only one thread accesses the shared variable at a time.</p> <p>A mutex is like a token that passes from one thread to another, allowing one thread at a time to proceed.</p> <p><code>mutex</code> is a semaphore that is initialized to <code>1</code>, which means that at most a  single thread can access the variable. mutex can guard a piece of code, called as <code>critical section</code>, against synchronization problems.</p> <pre><code>mutex = Semaphore(1)\n\n# threaded code\nmutex.wait()\n    # critical section \nmutext.signal()\n</code></pre> <p>There are several other ways people sometimes talk about mutexes. In the metaphor we have been using so far, the mutex is a token that is passed from one thread to another.</p> <p>In an alternative metaphor, we think of the critical section as a room, and only one thread is allowed to be in the room at a time. In this metaphor, mutexes are called 'locks', and a thread is said to lock the mutex before entering and unlock it while exiting.</p>"},{"location":"software-engg/python-concurrency/#4-multiplex","title":"4. Multiplex","text":"<p>What if we want multiple threads to execute the critical section. Of course, we want an upper limit on the number of threads running concurrently.</p> <p>This pattern is called <code>multiplex</code>.</p> <p>To allow multiple threads to run in the critical section, just initialize the semaphore to n, which is the maximum number of threads that should be allowed.</p> <p>At any time, the value of the semaphore represents the number of additional threads that may enter. If the value is zero, then the next thread will block until one of the threads inside exits and signals. When all threads have exited the value of the semaphore is restored to n.</p> <pre><code>multiplex = Semaphore(n)\n\n# threaded code\nmultiplex.wait()\n    # critical section\nmultiplex.signal()\n</code></pre> <p>Thinking again of metaphors, in this case I find it useful to think of the semaphore as a set of tokens (rather than a lock). As each thread invokes wait, it picks up one of the tokens; when it invokes signal it releases one. Only a thread that holds a token can enter the room. If no tokens are available when a thread arrives, it waits until another thread releases one.</p>"},{"location":"software-engg/python-concurrency/#barrier","title":"Barrier","text":"<p>Consider the 'rendezvous' pattern above. It was shown for only two threads. The limitation is that to solve it one thread should be aware of other threads.</p> <p>How to enable rendezvous pattern for multiple threads?</p> <p>This is called <code>Barrier</code>. Each running threads stops at the barrier, and waits until all threads reach the rendezvous point.</p> <pre><code>mutex = Semaphore(1)\nbarrier = Semaphore(0)\ncount = 0\n\nthreaded code\n\nrendezvous\n\n# make count thread safe\nmutex.wait()\n    count = count + 1\nmutex.signal()\n\nif count == n: barrier.signal()\n\n# block the threads\nbarrier.wait()\n# once the condition of count == n is met, signal the waiting \n# threads to move ahead\nbarrier.signal()\n\ncritical poiont\n</code></pre> <p>This pattern, a <code>wait</code> and a <code>signal</code> in rapid succession, occurs often enough that it has a name; it\u2019s called a <code>turnstile</code>, because it allows one thread to pass at a time, and it can be locked to bar all threads.</p> <p>In its initial state (zero), the turnstile is locked. The nth thread unlocks it and then all n threads go through.</p>"},{"location":"software-engg/python-concurrency/#classical-synchronization-problems","title":"Classical Synchronization Problems","text":"<p>For a multi-threaded problem define the synchronization constraints first. It will help to define the kinds of semaphores and the critical sections.</p>"},{"location":"software-engg/python-concurrency/#producer-consumer-problem","title":"Producer Consumer Problem","text":""},{"location":"software-engg/python-concurrency/#readers-writers-problem","title":"Readers Writers Problem","text":"<p>Pertains to any situation where a data structure, database, or file system is read and modified by concurrent threads.</p> <p>The synchronization constraints are: 1. Any number of readers can be in the critical section simultaneously.  2. Writers must have exclusive access to the critical section.</p>"},{"location":"software-engg/python-concurrency/#note-of-starvation-of-mutex","title":"Note of Starvation of Mutex","text":"<p>For most concurrent applications, starvation is unacceptable, so we enforce the requirement of <code>bounded waiting</code>, which means that the time a thread waits on a semaphore (or anywhere else, for that matter) has to be provably finite.</p> <p>In part, starvation is the responsibility of the scheduler. Whenever multiple threads are ready to run, the scheduler decides which one or, on a parallel processor, which set of threads gets to run. If a thread is never scheduled, then it will starve, no matter what we do with semaphores.</p> <p>So in order to say anything about starvation, we have to start with some assumptions about the scheduler. If we are willing to make a strong assumption, we can assume that the scheduler uses one of the many algorithms that can be proven to enforce bounded waiting. If we don\u2019t know what algorithm the scheduler uses, then we can get by with a weaker assumption:</p> <p>Property 1: if there is only one thread that is ready to run, the scheduler has to let it run.</p> <p>Property 2: if a thread is ready to run, then the time it waits until it runs is bounded.</p> <p>Property 3: if there are threads waiting on a semaphore when a thread executes signal, then one of the waiting threads has to be woken.</p> <p>Property 4: if a thread is waiting at a semaphore, then the number of threads that will be woken before it is bounded.</p> <p>A semaphore that has Property 4 is sometimes called a <code>strong semaphore</code>; one that has only Property 3 is called a <code>weak semaphore</code>. </p> <p>With weak semaphores, the simple mutex solution is vulnerable to starvation.</p>"},{"location":"software-engg/python-concurrency/#dining-philosophers","title":"Dining Philosophers","text":"<p>It's old! The Dining Philosophers Problem was proposed by Dijkstra in 1965.  A table with five plates, five forks (or chopsticks) and a big bowl of spaghetti. Five philosophers, who represent interacting threads, come to the table and execute the following loop:</p> <pre><code>while True: \n    think()\n    get_forks() \n    eat() \n    put_forks()\n</code></pre> <p>The forks represent resources that the threads have to hold exclusively in order to make progress. The philosophers need two forks to eat, so a hungry philosopher might have to wait for a neighbor to put down a fork.</p> <p>Assuming that the philosophers know how to think and eat, our job is to write a version of get forks and put forks that satisfies the following constraints:</p> <p>\u2022 Only one philosopher can hold a fork at a time. \u2022 It must be impossible for a deadlock to occur. \u2022 It must be impossible for a philosopher to starve waiting for a fork. \u2022 It must be possible for more than one philosopher to eat at the same time.</p>"},{"location":"software-engg/python-concurrency/#solution-1","title":"Solution 1","text":"<p>If 4 philosophers are trying to compete for the 5 forks, deadlock is impossible.</p> <p>Proof: If each philosopher takes a fork, there is one extra fork left. This fork can be used by any of it's two neighbors. Hence, no deadlock.</p> <pre><code># left and right forks of ith philosopher\ndef left(i):\n    return i+1\n\ndef right(i):\n    return i\n\n# Forks that be used by only one thread\nforks = [Semaphore(1) for _ in range(5)]\n\n# limit the philosophers at the table using a multiplex\nmultiplex = Semaphore(4)\n\ndef get_forks(i):\n    multiplex.wait()  # the last thread will wait here\n\n    forks[left(i)].wait()\n    forks[right(i)].wait()\n\ndef put_forks(i):\n    forks[left(i)].signal()\n    forks[right(i)].signal()\n\n    multiplex.signal() # let the waiting thread join the table and make another\n                       # thread wait at the multiplex\n</code></pre> <p>This will also prevent starvation. Why? </p> <p>We assume that we are using a <code>strong semaphore</code> which has <code>Property 4</code> mentioned above. Hence, the waiting thread will eventually get the resource.</p>"},{"location":"software-engg/python-concurrency/#solution-2","title":"Solution 2","text":"<p>Can the order of picking the forks prevent deadlock?</p> <p>What are the conditions of a deadlock in this case?</p> <p>The only deadlock condition: Each philosopher picks up the fork on the left and  is waiting for the right fork to be available(or vice versa). This can be easily proved via contradiction.</p> <p>If we break this condition, this can help avoiding deadlock. How?</p> <p>If the philosophers have at least one leftie and at least one rightie, deadlock is impossible.</p> <pre><code>def get_forks(i):\n    if i % 2 == 0:\n        forks[left(i)].wait()\n        forks[right(i)].wait()\n    else:\n        # invert the locking order\n        forks[right(i)].wait()\n        forks[left(i)].wait()\n\ndef put_forks(i):\n    forks[left(i)].signal()\n    forks[right(i)].signal()\n</code></pre>"},{"location":"software-engg/python-concurrency/#concurrency-vs-parallelism","title":"Concurrency vs Parallelism","text":"<p>Concurrency:  * Two tasks are being executed, even on a single core, simultaneously ie they are     overlapping each other.  * CPU executes the instructions from one tasks and then     swaps it with another task.  *However, at an instant CPU can execute only one task.     Here task can different processes or different threads.</p> <p>Parallelism: * Concept of a machine having multiple cores. * Multiple processes(1 process per core) is executed parallely in real time.</p>"},{"location":"software-engg/python-concurrency/#references","title":"References","text":"<ol> <li>https://leetcode.com/tag/concurrency/</li> <li>Little Book of Semaphores by Allen B Downey link</li> </ol>"},{"location":"software-engg/recipes/python-dependencies/","title":"Working with Python Dependencies","text":""},{"location":"software-engg/recipes/python-dependencies/#pyprojecttoml","title":"pyproject.toml","text":"<p>WIP</p>"},{"location":"software-engg/recipes/python-dependencies/#what-does-pip-install-do","title":"What does <code>pip install</code> do?","text":"<p>WIP</p>"},{"location":"software-engg/recipes/python-dependencies/#pip-get-dependency-list-of-a-package-at-pypi","title":"pip : Get Dependency List of a Package at PyPI","text":"<p>Visit: <code>https://pypi.org/pypi/{package}/json</code></p> <p>Search for <code>requires_dist</code>. You can see the list of deps and the supported versions.</p> <p>You can do the same from the command line</p> <pre><code># to get the deps of package `dvclive`\ncurl https://pypi.org/pypi/dvclive/json | jq '.info.requires_dist' | nvim -\n</code></pre>"},{"location":"software-engg/recipes/python-dependencies/#install-a-local-package-that-you-are-developing","title":"Install a local package that you are developing","text":"<p>You are working on a package, say <code>dvc</code>, in your local. You can to install this  local package as a dependency in your current project, say <code>dvc-demo</code>. </p> <p>This happens because of pip's editable install feature. Editable installs allow you to install your project without copying any files. Instead, the files in the development directory are added to Python\u2019s import path.</p> <pre><code>cd dvc-demo\npip install -e /path/to/local/dvc\n# the folder should have setup.py or pyproject.toml file\n</code></pre>"},{"location":"software-engg/recipes/python-fstrings/","title":"Python Recipes","text":""},{"location":"software-engg/recipes/python-fstrings/#using-f-strings","title":"Using <code>f-strings</code>","text":"<p>Evaluate expressions inside f-strings.</p> <pre><code>x = 10\ny = 5\nprint(f\"The sum of {x} and {y} is {x + y}.\")\n\n# The sum of 10 and 5 is 15.\n</code></pre>"},{"location":"software-engg/recipes/python-fstrings/#string-allignment-and-padding","title":"String Allignment and Padding","text":"<pre><code># `name` will be alligned in a space of 10 chars\n# if the value of `name` is greater than 10 chars, all the chars will be printed\n\n# Example 1: Left-align text\nname = \"Alice\"\nprint(f\": {name:&lt;10} :\")\n\n# Example 2: Center-align text\nname = \"Bob\"\nprint(f\": {name:^10} :\")\n\n# Example 3: Right-align text\nname = \"Charlie\"\nprint(f\": {name:&gt;10} :\")\n\nname = \"VeryLoooooongName\"\nprint(f\": {name:&gt;10} :\")\n</code></pre> <pre><code>: Alice      :\n:    Bob     :\n:    Charlie :\n: VeryLoooooongName :\n</code></pre>"},{"location":"software-engg/recipes/python-fstrings/#print-headers","title":"Print headers","text":"<pre><code>billion = 10**9\n# pads the space with the char mentioned before the alignment symbol\n# pads with `=`\nprint(f\"{' Start ':=^80}\")\nprint(f\"\"\"This is a multiline fstring:\nBillion: {billion:_}\nBillion: {billion:,}\nBillion: {billion:e}\n    I can even preserve formatting.\n        Like in this line and above.\n\"\"\")\nprint(f\"{' End ':=^80}\")\n</code></pre> <pre><code>==================================== Start =====================================\nThis is a multiline fstring:\nBillion: 1_000_000_000\nBillion: 1,000,000,000\nBillion: 1.000000e+09\n        I can even preserve formatting.\n                Like in this line and above.\n\n===================================== End ======================================\n</code></pre>"},{"location":"software-engg/recipes/python-fstrings/#print-expressions-and-their-values","title":"Print expressions and their values","text":"<p>This can be very useful in print values to logs</p> <pre><code>a, b = 10, 20\nprint(f\"{a + b = }\")\nprint(f\"{bool(a) = }\")\n\n# a + b = 30\n# bool(a) = True\n</code></pre>"},{"location":"software-engg/recipes/python-fstrings/#format-numbers","title":"Format numbers","text":"<pre><code>import math\n\nprint(f\"Value of Pi: {math.pi}\")\n\n# Round the number to 2 decimal places\nformatted_float = f\"Rounded: {math.pi:.2f}\"\nprint(formatted_float)\n\n# Round the number to the nearest integer\nformatted_integer = f\"Integer: {math.pi:.0f}\"\nprint(formatted_integer)\n\n# Format the number as a percentage with no decimal places\nformatted_percentage = f\"Percentage: {math.pi:.0%}\"\nprint(formatted_percentage)\n\n# Format the number in scientific notation with 3 decimal places\nformatted_scientific = f\"Scientific: {math.pi:.3e}\"\nprint(formatted_scientific)\n\n# Format the number in general format with 4 significant digits\nformatted_general = f\"General: {math.pi:.4g}\"\nprint(formatted_general)\n\n# Format an integer as a hexadecimal number with a minimum width of 8\ninteger_value = 255\nformatted_hex = f\"Hexadecimal: {integer_value:#0{8}x}\"\nprint(formatted_hex)\n\n# Format an integer as a binary number with a minimum width of 8\nformatted_binary = f\"Binary: {integer_value:#0{8}b}\"\nprint(formatted_binary)\n\nn = 1234.5678\nprint(f\"Formatted integer: {n:,.3f}\")\n</code></pre> <pre><code>Value of Pi: 3.141592653589793\nRounded: 3.14\nInteger: 3\nPercentage: 314%\nScientific: 3.142e+00\nGeneral: 3.142\nHexadecimal: 0x0000ff\nBinary: 0b11111111\n</code></pre>"},{"location":"software-engg/recipes/python-fstrings/#formatting-date-and-time","title":"Formatting Date and Time","text":"<p>Datetime formatting directives mentioned in python docs.</p> <pre><code>from datetime import datetime\n\nnow = datetime.now()\n\nprint(f\"now: {now:%d-%m-%y (%H:%M:%S)}\")\n# %c : Locale\u2019s appropriate date and time representation\nprint(f\"now: {now:%c}\")\n</code></pre> <pre><code>now: 11-09-24 (13:51:03)\nnow: Wed Sep 11 13:51:03 2024\n</code></pre>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/category/test/","title":"test","text":""},{"location":"blog/category/vim/","title":"vim","text":""},{"location":"blog/category/beginner/","title":"beginner","text":""},{"location":"blog/category/http/","title":"http","text":""},{"location":"blog/category/git/","title":"git","text":""},{"location":"blog/category/tools/","title":"tools","text":""}]}